---
const pathname = Astro.url.pathname;

const navItems = [
  { href: '/', label: 'Accueil' },
  { href: '/chambres', label: 'Chambres' },
  { href: '/services', label: 'Services' },
  { href: '/contact', label: 'Contact' },
  { href: '/reservation', label: 'Réservation' },
];

function isActive(path: string): boolean {
  if (path === '/' && pathname === '/') return true;
  if (path !== '/' && pathname.startsWith(path)) return true;
  return false;
}
---

<header class="fixed top-0 left-0 w-full z-50 transition-all duration-300" id="main-header">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between py-4">
      <a href="/" class="text-2xl md:text-3xl font-serif text-white font-bold">
        Maison du Trésor
      </a>
      
      <nav class="hidden md:block">
        <ul class="flex space-x-8">
          {navItems.map(item => (
            <li>
              <a 
                href={item.href} 
                class={`text-white hover:text-ocre-400 transition-colors duration-300 ${isActive(item.href) ? 'font-medium border-b-2 border-ocre-400' : ''}`}
              >
                {item.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>
      
      <button class="md:hidden text-white" id="mobile-menu-toggle" aria-label="Menu">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>
  </div>

  <!-- Mobile menu -->
  <div id="mobile-menu" class="md:hidden bg-navy-900/95 backdrop-blur-sm absolute w-full left-0 top-full transform -translate-y-full transition-transform duration-300 ease-in-out z-20 opacity-0 invisible">
    <nav class="container mx-auto px-4 py-4">
      <ul class="space-y-4">
        {navItems.map(item => (
          <li>
            <a 
              href={item.href} 
              class={`block py-2 text-white hover:text-ocre-400 transition-colors duration-300 ${isActive(item.href) ? 'font-medium text-ocre-400' : ''}`}
            >
              {item.label}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</header>

<script>
  // Toggle menu on mobile
  const header = document.getElementById('main-header');
  const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  
  // Header scroll effect
  window.addEventListener('scroll', () => {
    if (window.scrollY > 50) {
      header?.classList.add('bg-white', 'shadow-md');
      header?.classList.remove('bg-transparent');
      const logo = header?.querySelector('a');
      if (logo) {
        logo.classList.remove('text-white');
        logo.classList.add('text-gray-800');
      }
      
      const navLinks = header?.querySelectorAll('nav ul li a');
      navLinks?.forEach(link => {
        link.classList.remove('text-white');
        link.classList.add('text-gray-800');
      });
      
      const menuButton = header?.querySelector('#mobile-menu-toggle');
      if (menuButton) {
        menuButton.classList.remove('text-white');
        menuButton.classList.add('text-gray-800');
      }

      // Update mobile menu background when scrolled
      if (mobileMenu) {
        mobileMenu.classList.remove('bg-navy-900/95');
        mobileMenu.classList.add('bg-white');
      }
      
      // Update mobile menu text color when scrolled
      const mobileLinks = mobileMenu?.querySelectorAll('a');
      mobileLinks?.forEach(link => {
        link.classList.remove('text-white');
        link.classList.add('text-gray-800');
      });
    } else {
      header?.classList.remove('bg-white', 'shadow-md');
      header?.classList.add('bg-transparent');
      
      const logo = header?.querySelector('a');
      if (logo) {
        logo.classList.add('text-white');
        logo.classList.remove('text-gray-800');
      }
      
      const navLinks = header?.querySelectorAll('nav ul li a');
      navLinks?.forEach(link => {
        link.classList.add('text-white');
        link.classList.remove('text-gray-800');
      });
      
      const menuButton = header?.querySelector('#mobile-menu-toggle');
      if (menuButton) {
        menuButton.classList.add('text-white');
        menuButton.classList.remove('text-gray-800');
      }

      // Reset mobile menu background when at top
      if (mobileMenu) {
        mobileMenu.classList.add('bg-navy-900/95');
        mobileMenu.classList.remove('bg-white');
      }
      
      // Reset mobile menu text color when at top
      const mobileLinks = mobileMenu?.querySelectorAll('a');
      mobileLinks?.forEach(link => {
        link.classList.add('text-white');
        link.classList.remove('text-gray-800');
      });
    }
  });
  
  // Mobile menu toggle
  mobileMenuToggle?.addEventListener('click', () => {
    if (mobileMenu?.classList.contains('opacity-0')) {
      mobileMenu.classList.remove('opacity-0', 'invisible', '-translate-y-full');
      mobileMenu.classList.add('opacity-100', 'visible', 'translate-y-0');
    } else {
      mobileMenu?.classList.add('opacity-0', 'invisible', '-translate-y-full');
      mobileMenu?.classList.remove('opacity-100', 'visible', 'translate-y-0');
    }
  });
</script>